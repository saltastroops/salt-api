#-----------------------------------------------------------------------------------
# Adapted from https://github.com/marketplace/actions/install-poetry-action#testing
#-----------------------------------------------------------------------------------
name: Test

on: ["push", "pull_request"]

env:
  testdata_dir: tests/salt-testdata

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #           clone test (mock) data
      #----------------------------------------------
      - name: Clone test data repository
        env:
          TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: git clone https://${TOKEN}@github.com/saltastroops/salt-testdata.git $testdata_dir
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        env:
          TEST_DATA_DIR: ${testdata_dir}/salt-api
          PROPOSALS_DIR: tests/
          SDB_DSN: ''
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          FRONTEND_URI: ''
          SMTP_SERVER: localhost:7777
          FROM_EMAIL: salthelp@example.com
          MAPPING_TOOL_DIR: $testdata_dir
          MAPPING_TOOL_JAR: saltapi/util.py
          MAPPING_TOOL_DATABASE_ACCESS_CONFIG: saltapi/util.py
          MAPPING_TOOL_LOG_DIR: tests/
          MAPPING_TOOL_PROPOSALS_DIR: tests/
          MAPPING_TOOL_API_KEY: ''
          MAPPING_TOOL_PIPT_DIR: ''
          MAPPING_TOOL_WEB_MANAGER_URL: https://www.salt.ac.za/wm/
          MAPPING_TOOL_EPHEMERIS_URL: http://pysalt.salt.ac.za/finder_chart/ephemerides.cgi
          MAPPING_TOOL_JAVA_COMMAND: ''
          MAPPING_TOOL_PYTHON_INTERPRETER: ''
          MAPPING_TOOL_FINDER_CHART_TOOL: ''
          MAPPING_TOOL_IMAGE_CONVERSION_COMMAND: ''
          MAPPING_TOOL_MAILCHIMP_API_KEY: ''
          MAPPING_TOOL_MAILCHIMP_LIST_ID: ''
          MAPPING_TOOL_NO_REPLY_EMAIL: user@example.com
          MAPPING_TOOL_SUBMIT_EMAIL: user@example.com
          MAPPING_TOOL_SSDA_URL: ''
          MAPPING_TOOL_SSDA_PASSWORD: ''
          MAPPING_TOOL_SSDA_USERNAME: ''
          MAPPING_TOOL_SDB_URL: ''
          MAPPING_TOOL_SDB_PASSWORD: ''
          MAPPING_TOOL_SDB_USERNAME: ''
          FINDING_CHARTS_DIR: tests/
        run: |
          source .venv/bin/activate
          pytest --mock-db-data
          coverage report
      #----------------------------------------------
      #              lint
      #----------------------------------------------
      - name: Lint
        run: ./lint.sh
